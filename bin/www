#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('whu-library-seat-ghauth:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create socket.io server.
 */

 function clientIsValid (id) {
   const ids = ['whu-library-seat', 'whu-library-seat-mobile']
   return ids.findIndex((item) => item === id) !== -1
 }

var io = require('socket.io')(server);
app.set('socketio', io);

io.use((socket, next) => {
  let clientId = socket.handshake.headers['x-clientid'];
  if (clientIsValid(clientId)) {
    return next();
  }
  return next(new Error('认证失败'));
});

const connectedSockets = new Set();

io.on('connection', socketio => {
  console.log(`Socket 连接成功: ${socketio.id}`)
  connectedSockets.add(socketio);
  socketio.on('disconnect', () => {
    connectedSockets.delete(socketio);
    console.log(`Socket 删除成功: ${socketio.id}`)
  });
  socketio.emit('socketId', socketio.id);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
